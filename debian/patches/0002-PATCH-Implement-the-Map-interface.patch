From: Alex Gleason <alex@alexgleason.me>
Date: Sun, 7 Jan 2024 20:35:29 -0600
Subject: [PATCH] Implement the Map interface

PR-URL: https://github.com/isaacs/node-lru-cache/pull/326
bug: https://github.com/isaacs/node-lru-cache/pull/326
origin: https://github.com/isaacs/node-lru-cache/commit/1fb116729f28fb610285f5ae455cb383f2d3d3bf.patch
Credit: @alexgleason
Close: #326
Reviewed-by: @isaacs
---
 src/index.ts | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/src/index.ts b/src/index.ts
index 400f4cc..9e54ac0 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -809,7 +809,7 @@ export namespace LRUCache {
  * Changing any of these will alter the defaults for subsequent method calls,
  * but is otherwise safe.
  */
-export class LRUCache<K extends {}, V extends {}, FC = unknown> {
+export class LRUCache<K extends {}, V extends {}, FC = unknown> implements Map<K,V> {
   // properties coming in from the options of these, only max and maxSize
   // really *need* to be protected. The rest can be modified, as they just
   // set defaults for various methods.
@@ -1389,7 +1389,7 @@ export class LRUCache<K extends {}, V extends {}, FC = unknown> {
         this.#keyList[i] !== undefined &&
         !this.#isBackgroundFetch(this.#valList[i])
       ) {
-        yield [this.#keyList[i], this.#valList[i]]
+        yield [this.#keyList[i], this.#valList[i]] as [K, V]
       }
     }
   }
@@ -1457,7 +1457,7 @@ export class LRUCache<K extends {}, V extends {}, FC = unknown> {
         v !== undefined &&
         !this.#isBackgroundFetch(this.#valList[i])
       ) {
-        yield this.#valList[i]
+        yield this.#valList[i] as V
       }
     }
   }
@@ -1488,6 +1488,12 @@ export class LRUCache<K extends {}, V extends {}, FC = unknown> {
     return this.entries()
   }
 
+  /**
+   * A String value that is used in the creation of the default string description of an object.
+   * Called by the built-in method Object.prototype.toString.
+   */
+  [Symbol.toStringTag] = 'LRUCache'
+
   /**
    * Find a value for which the supplied fn method returns a truthy value,
    * similar to Array.find().  fn is called as fn(value, key, cache).
